/*
Empresa          :  EGCC
Software         :  Sistema de Hoteles
DBMS             :  SQL SERVER
Base de datos    :  BDHoteles
Script           :  Crea la base de datos con sus respectivas tablas
Responsable      :  Mag. Eric Gustavo Coronel Castillo
Email            :  gcoronelc@gmail.com
Sitio Web        :  www.desarrollasoftware.com
Blog             :  https://gcoronelc.github.io/
Creado el        :  13-OCT-2024
Actualización 1  :  29-ABR-2025
*/


-- =============================================
-- CREACIÓN DE LA BASE DE DATOS
-- =============================================

IF( NOT EXISTS ( SELECT name FROM master.sys.databases WHERE name = 'BDHOTELES' ) )
BEGIN
	CREATE DATABASE BDHOTELES;
END;
go

USE BDHOTELES;
go


DROP TABLE IF EXISTS PAGO;
DROP TABLE IF EXISTS CONSUMO;
DROP TABLE IF EXISTS SERVICIO;
DROP TABLE IF EXISTS RESERVA;
DROP TABLE IF EXISTS HABITACION;
DROP TABLE IF EXISTS TIPO;
DROP TABLE IF EXISTS ESTADO_RESERVA;
DROP TABLE IF EXISTS ESTADO_HABITACION;
DROP TABLE IF EXISTS CLIENTE;
DROP TABLE IF EXISTS EMPLEADO;
go



-- =============================================
-- CREACION DE TABLAS 
-- =============================================


CREATE TABLE ESTADO_RESERVA
( 
	IDESTADORESERVA      integer  NOT NULL ,
	DESCRIPCION          varchar(20)  NOT NULL ,
	DETALLE              varchar(500)  NOT NULL ,
	CONSTRAINT XPKESTADO_RESERVA PRIMARY KEY (IDESTADORESERVA ASC)
)
go



CREATE TABLE CLIENTE
( 
	IDCLIENTE            int IDENTITY ( 1,1 ) ,
	APELLIDO             varchar(100)  NOT NULL ,
	NOMBRE               varchar(100)  NOT NULL ,
	EMAIL                varchar(100)  NOT NULL ,
	TELEFONO             varchar(15)  NOT NULL ,
	CONSTRAINT XPKCLIENTE PRIMARY KEY (IDCLIENTE ASC),
	CONSTRAINT XAK1CLIENTE UNIQUE (EMAIL  ASC)
)
go



CREATE TABLE TIPO
( 
	IDTIPO               int  NOT NULL ,
	DESCRIPCION          varchar(20)  NOT NULL ,
	PRECIO               decimal(10,2)  NOT NULL ,
	CONSTRAINT XPKTIPO PRIMARY KEY (IDTIPO ASC)
)
go



CREATE TABLE ESTADO_HABITACION
( 
	IDESTADOHABITACION   integer  NOT NULL ,
	DESCRIPCION          varchar(20)  NOT NULL ,
	DETALLE              varchar(500)  NOT NULL ,
	CONSTRAINT XPKESTADO_HABITACION PRIMARY KEY (IDESTADOHABITACION ASC)
)
go



CREATE TABLE HABITACION
( 
	IDHABITACION         int IDENTITY ( 1,1 ) ,
	CODIGO               varchar(20)  NOT NULL ,
	PISO                 integer  NOT NULL ,
	IDTIPO               int  NOT NULL ,
	IDESTADOHABITACION   integer  NOT NULL ,
	CONSTRAINT XPKHABITACION PRIMARY KEY (IDHABITACION ASC),
	CONSTRAINT XAK1HABITACION UNIQUE (CODIGO  ASC),
	CONSTRAINT FK_HABITACION_TIPO FOREIGN KEY (IDTIPO) REFERENCES TIPO(IDTIPO)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
CONSTRAINT FK_HABITACION_ESTADO FOREIGN KEY (IDESTADOHABITACION) REFERENCES ESTADO_HABITACION(IDESTADOHABITACION)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
)
go



CREATE TABLE EMPLEADO
( 
	IDEMPLEADO           int IDENTITY ( 1,1 ) ,
	APELLIDO             varchar(100)  NOT NULL ,
	NOMBRE               varchar(100)  NOT NULL ,
	EMAIL                varchar(100)  NOT NULL ,
	TELEFONO             varchar(15)  NOT NULL ,
	USUARIO              varchar(20)  NOT NULL ,
	CLAVE                varchar(20)  NOT NULL ,
	CONSTRAINT XPKEMPLEADO PRIMARY KEY (IDEMPLEADO ASC)
)
go



CREATE TABLE RESERVA
( 
	IDRESERVA            int IDENTITY ( 1,1 ) ,
	IDEMPLEADO           int  NOT NULL ,
	IDHABITACION         int  NOT NULL ,
	IDCLIENTE            int  NOT NULL ,
	IDESTADORESERVA      integer  NOT NULL ,
	COSTO                decimal(10,2)  NOT NULL ,
	FECHA_INGRESO        datetime  NOT NULL ,
	FECHA_SALIDA         datetime  NULL ,
	CONSTRAINT XPKRESERVA PRIMARY KEY (IDRESERVA ASC),
	CONSTRAINT FK_RESERVA_ESTADO_RESERVA FOREIGN KEY (IDESTADORESERVA) REFERENCES ESTADO_RESERVA(IDESTADORESERVA)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
CONSTRAINT FK_RESERVA_CLIENTE FOREIGN KEY (IDCLIENTE) REFERENCES CLIENTE(IDCLIENTE)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
CONSTRAINT FK_RESERVA_HABITACION FOREIGN KEY (IDHABITACION) REFERENCES HABITACION(IDHABITACION)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
CONSTRAINT FK_RESERVA_EMPLEADO FOREIGN KEY (IDEMPLEADO) REFERENCES EMPLEADO(IDEMPLEADO)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
)
go



CREATE TABLE SERVICIO
( 
	IDSERVICIO           int IDENTITY ( 1,1 ) ,
	DESCRIPCION          varchar(100)  NOT NULL ,
	PRECIO               decimal(10,2)  NOT NULL ,
	CONSTRAINT XPKSERVICIO PRIMARY KEY (IDSERVICIO ASC)
)
go



CREATE TABLE CONSUMO
( 
	IDCONSUMO            integer IDENTITY ( 1,1 ) ,
	IDEMPLEADO           int  NOT NULL ,
	IDRESERVA            int  NOT NULL ,
	IDSERVICIO           int  NOT NULL ,
	FECHA                datetime  NOT NULL ,
	CANTIDAD             int  NOT NULL ,
	PRECIO               decimal(10,2)  NOT NULL ,
	COSTO                decimal(10,2)  NOT NULL ,
	CONSTRAINT XPKCONSUMO PRIMARY KEY (IDCONSUMO ASC),
	CONSTRAINT FK_CONSUMO_RESERVA FOREIGN KEY (IDRESERVA) REFERENCES RESERVA(IDRESERVA)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
CONSTRAINT FK_CONSUMO_SERVICIO FOREIGN KEY (IDSERVICIO) REFERENCES SERVICIO(IDSERVICIO)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
CONSTRAINT FK_CONSUMO_EMPLEADO FOREIGN KEY (IDEMPLEADO) REFERENCES EMPLEADO(IDEMPLEADO)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
)
go



CREATE TABLE PAGO
( 
	IDRESERVA            int  NOT NULL ,
	IDEMPLEADO           int  NOT NULL ,
	FECHA                datetime  NOT NULL ,
	IMPORTE              decimal(10,2)  NOT NULL ,
	IMPUESTO             decimal(10,2)  NOT NULL ,
	TOTAL                decimal(10,2)  NOT NULL ,
	CONSTRAINT XPKPAGO PRIMARY KEY (IDRESERVA ASC),
	CONSTRAINT FK_PAGO_RESERVA FOREIGN KEY (IDRESERVA) REFERENCES RESERVA(IDRESERVA)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION,
CONSTRAINT FK_PAGO_EMPLEADO FOREIGN KEY (IDEMPLEADO) REFERENCES EMPLEADO(IDEMPLEADO)
		ON DELETE NO ACTION
		ON UPDATE NO ACTION
)
go




-- =============================================
-- CARGA DATOS
-- =============================================

-- Datos para Clientes

SET IDENTITY_INSERT dbo.CLIENTE ON;  
GO

INSERT INTO CLIENTE(IDCLIENTE,APELLIDO,NOMBRE,EMAIL,TELEFONO) 
VALUES (1, 'Pérez', 'Juan', 'juan@mail.com', '963458213');
GO

INSERT INTO CLIENTE(IDCLIENTE,APELLIDO,NOMBRE,EMAIL,TELEFONO)
VALUES (2, 'Gómez', 'Ana', 'ana@mail.com', '987654321');
GO

INSERT INTO CLIENTE(IDCLIENTE,APELLIDO,NOMBRE,EMAIL,TELEFONO)
VALUES (3, 'Torres', 'Alejandra', 'alejandra@mail.com', '925963974');
GO

INSERT INTO CLIENTE(IDCLIENTE,APELLIDO,NOMBRE,EMAIL,TELEFONO)
VALUES (4, 'Fernandez', 'Ricardo', 'ricardo@mail.com', '945568423');
GO

INSERT INTO CLIENTE(IDCLIENTE,APELLIDO,NOMBRE,EMAIL,TELEFONO)
VALUES (5, 'Perez', 'Carmen', 'carmen@mail.com', '955663526');
GO


SET IDENTITY_INSERT dbo.CLIENTE OFF;  
GO

SELECT * FROM CLIENTE;
GO


-- Datos de Tipos de Habitaciones

INSERT INTO TIPO VALUES (1, 'SIMPLE', 100.00);
INSERT INTO TIPO VALUES (2, 'DOBLE', 150.00);
INSERT INTO TIPO VALUES (3, 'SUITE', 300.00);
GO

SELECT * FROM TIPO;
GO

-- Datos  para Estados de Habitaciones

INSERT INTO ESTADO_HABITACION 
VALUES (1, 'Libre', 'La habitación está disponible para ser ocupada. Está limpia, en buen estado y lista para recibir nuevos huéspedes.');
INSERT INTO ESTADO_HABITACION 
VALUES (2, 'Ocupada', 'La habitación está siendo utilizada actualmente por un huésped. No está disponible para asignarse a otros clientes.');
INSERT INTO ESTADO_HABITACION 
VALUES (3, 'Mantenimiento', 'La habitación está fuera de servicio temporalmente porque se están realizando reparaciones, mejoras o resolviendo problemas técnicos.');
INSERT INTO ESTADO_HABITACION 
VALUES (4, 'Reservada', 'La habitación está comprometida para un huésped que llegará próximamente. Aunque físicamente esté vacía, no está disponible para otros clientes.');
INSERT INTO ESTADO_HABITACION 
VALUES (5, 'Limpieza', 'La habitación está en proceso de limpieza y acondicionamiento por parte del personal de hotel después de que un huésped la desocupó.');
INSERT INTO ESTADO_HABITACION 
VALUES (6, 'Inactiva', 'La habitación no está en uso y tampoco está disponible para asignarse a huéspedes.');
GO

SELECT * FROM ESTADO_HABITACION;
GO


-- Datos para Habitaciones

SET IDENTITY_INSERT dbo.HABITACION ON;  
GO

-- Piso 1
INSERT INTO HABITACION(IDHABITACION,CODIGO,PISO,IDTIPO,IDESTADOHABITACION) VALUES (1, 'HAB-101', 1, 1, 1);
INSERT INTO HABITACION(IDHABITACION,CODIGO,PISO,IDTIPO,IDESTADOHABITACION) VALUES (2, 'HAB-102', 1, 2, 1);
INSERT INTO HABITACION(IDHABITACION,CODIGO,PISO,IDTIPO,IDESTADOHABITACION) VALUES (3, 'HAB-103', 1, 3, 3);
GO

-- Piso 2
INSERT INTO HABITACION(IDHABITACION,CODIGO,PISO,IDTIPO,IDESTADOHABITACION) VALUES (4, 'HAB-201', 2, 1, 1);
INSERT INTO HABITACION(IDHABITACION,CODIGO,PISO,IDTIPO,IDESTADOHABITACION) VALUES (5, 'HAB-202', 2, 2, 1);
INSERT INTO HABITACION(IDHABITACION,CODIGO,PISO,IDTIPO,IDESTADOHABITACION) VALUES (6, 'HAB-203', 2, 3, 3);
INSERT INTO HABITACION(IDHABITACION,CODIGO,PISO,IDTIPO,IDESTADOHABITACION) VALUES (7, 'HAB-204', 2, 3, 1);
GO

-- Piso 3
INSERT INTO HABITACION(IDHABITACION,CODIGO,PISO,IDTIPO,IDESTADOHABITACION) VALUES (8, 'HAB-301', 3, 1, 1);
INSERT INTO HABITACION(IDHABITACION,CODIGO,PISO,IDTIPO,IDESTADOHABITACION) VALUES (9, 'HAB-302', 3, 2, 4);
INSERT INTO HABITACION(IDHABITACION,CODIGO,PISO,IDTIPO,IDESTADOHABITACION) VALUES (10, 'HAB-303', 3, 3, 4);
INSERT INTO HABITACION(IDHABITACION,CODIGO,PISO,IDTIPO,IDESTADOHABITACION) VALUES (11, 'HAB-304', 3, 3, 1);
GO

SET IDENTITY_INSERT dbo.HABITACION OFF;  
GO

SELECT * FROM HABITACION;
GO

-- Datos para Estados de Reservas

INSERT INTO ESTADO_RESERVA(IDESTADORESERVA,DESCRIPCION,DETALLE) 
VALUES (1, 'Pendiente', 'La reserva ha sido solicitada pero aún no está confirmada. Puede estar en espera de verificación de disponibilidad, aprobación de pago, o confirmación por parte del hotel o del cliente.');
INSERT INTO ESTADO_RESERVA(IDESTADORESERVA,DESCRIPCION,DETALLE) 
VALUES (2, 'Confirmada', 'La reserva ha sido aprobada y garantizada por el hotel. La habitación está apartada para el cliente en las fechas solicitadas.');
INSERT INTO ESTADO_RESERVA(IDESTADORESERVA,DESCRIPCION,DETALLE) 
VALUES (3, 'Cancelada', 'La reserva ha sido anulada, ya sea por decisión del cliente o del hotel. La habitación queda liberada para ser asignada a otros huéspedes.');
INSERT INTO ESTADO_RESERVA(IDESTADORESERVA,DESCRIPCION,DETALLE) 
VALUES (4, 'En Progreso', 'El huésped ya realizó el check-in y está actualmente hospedado en el hotel. La reserva está activa y el cliente está ocupando la habitación.');
INSERT INTO ESTADO_RESERVA(IDESTADORESERVA,DESCRIPCION,DETALLE) 
VALUES (5, 'Completada', 'El ciclo de la reserva ha finalizado. El huésped ya realizó el check-out, ha abandonado el hotel y ha completado todos los pagos correspondientes.');
GO

SELECT * FROM ESTADO_RESERVA;
GO

-- Datos para Empleados

SET IDENTITY_INSERT dbo.EMPLEADO ON;  
GO

INSERT INTO EMPLEADO(IDEMPLEADO,APELLIDO,NOMBRE,EMAIL,TELEFONO,USUARIO,CLAVE)
VALUES(1,'REYES','ENRIQUE','ereyes@gmail.com','996325456','ereyes','secreto');
INSERT INTO EMPLEADO(IDEMPLEADO,APELLIDO,NOMBRE,EMAIL,TELEFONO,USUARIO,CLAVE)
VALUES(2,'MILLER','DAYANA','dmiller@gmail.com','999265147','dmiller','princesa');
INSERT INTO EMPLEADO(IDEMPLEADO,APELLIDO,NOMBRE,EMAIL,TELEFONO,USUARIO,CLAVE)
VALUES(3,'VELASQUEZ','SERGIO','svelasquez@gmail.com','996688452','svelasquez','goliat');
GO

SET IDENTITY_INSERT dbo.EMPLEADO OFF;  
GO

SELECT * FROM EMPLEADO;
GO


-- Datos de prueba para Reservas

SET IDENTITY_INSERT dbo.RESERVA ON;  
GO

INSERT INTO RESERVA(IDRESERVA,IDEMPLEADO,IDHABITACION,IDCLIENTE,IDESTADORESERVA,COSTO,FECHA_INGRESO,FECHA_SALIDA) 
VALUES (1, 1, 3, 4, 5, 0, GETDATE()-10, GETDATE()-5);
INSERT INTO RESERVA(IDRESERVA,IDEMPLEADO,IDHABITACION,IDCLIENTE,IDESTADORESERVA,COSTO,FECHA_INGRESO,FECHA_SALIDA) 
VALUES (2, 3, 4, 1, 4, 0, GETDATE()-1, GETDATE()+5);
INSERT INTO RESERVA(IDRESERVA,IDEMPLEADO,IDHABITACION,IDCLIENTE,IDESTADORESERVA,COSTO,FECHA_INGRESO,FECHA_SALIDA) 
VALUES (3, 2, 9, 2, 1, 0, GETDATE()+15, GETDATE()+20);
INSERT INTO RESERVA(IDRESERVA,IDEMPLEADO,IDHABITACION,IDCLIENTE,IDESTADORESERVA,COSTO,FECHA_INGRESO,FECHA_SALIDA) 
VALUES (4, 3, 10, 3, 1, 0, GETDATE()+13, GETDATE()+20);
GO

SET IDENTITY_INSERT dbo.RESERVA OFF;  
GO

UPDATE RESERVA 
SET COSTO = DATEDIFF(DAY,R.FECHA_INGRESO,R.FECHA_SALIDA) * T.PRECIO
FROM RESERVA R
JOIN HABITACION H ON R.IDHABITACION=H.IDHABITACION
JOIN TIPO T ON H.IDTIPO=T.IDTIPO;
GO

SELECT * FROM RESERVA;
GO

SELECT * FROM HABITACION;
SELECT * FROM ESTADO_HABITACION;
SELECT * FROM ESTADO_RESERVA;
GO

-- Datos para Servicios

SET IDENTITY_INSERT dbo.SERVICIO ON;  
GO

INSERT INTO SERVICIO(IDSERVICIO,DESCRIPCION,PRECIO) VALUES (1, 'DESAYUNO', 18.00);
INSERT INTO SERVICIO(IDSERVICIO,DESCRIPCION,PRECIO) VALUES (2, 'ALMUERZO', 35.00);
INSERT INTO SERVICIO(IDSERVICIO,DESCRIPCION,PRECIO) VALUES (3, 'CENA', 25.00);
INSERT INTO SERVICIO(IDSERVICIO,DESCRIPCION,PRECIO) VALUES (4, 'POSTRE', 15.00);
INSERT INTO SERVICIO(IDSERVICIO,DESCRIPCION,PRECIO) VALUES (5, 'GASEOSA', 10.00);
INSERT INTO SERVICIO(IDSERVICIO,DESCRIPCION,PRECIO) VALUES (6, 'CERVEZA', 18.00);
GO

SET IDENTITY_INSERT dbo.SERVICIO OFF;  
GO

SELECT * FROM SERVICIO;
GO

-- Consumos por reserva

SET IDENTITY_INSERT dbo.CONSUMO ON;  
GO

INSERT INTO CONSUMO(IDCONSUMO,IDEMPLEADO,IDRESERVA,IDSERVICIO,FECHA,CANTIDAD,PRECIO,COSTO)
VALUES (1, 1, 1, 1,GETDATE()-9,1,0,0); 
INSERT INTO CONSUMO(IDCONSUMO,IDEMPLEADO,IDRESERVA,IDSERVICIO,FECHA,CANTIDAD,PRECIO,COSTO)
VALUES (2, 1, 1, 3,GETDATE()-9,1,0,0); 
INSERT INTO CONSUMO(IDCONSUMO,IDEMPLEADO,IDRESERVA,IDSERVICIO,FECHA,CANTIDAD,PRECIO,COSTO)
VALUES (3, 2, 1, 1,GETDATE()-8,1,0,0); 
INSERT INTO CONSUMO(IDCONSUMO,IDEMPLEADO,IDRESERVA,IDSERVICIO,FECHA,CANTIDAD,PRECIO,COSTO)
VALUES (4, 2, 1, 2,GETDATE()-8,1,0,0); 
INSERT INTO CONSUMO(IDCONSUMO,IDEMPLEADO,IDRESERVA,IDSERVICIO,FECHA,CANTIDAD,PRECIO,COSTO)
VALUES (5, 3, 1, 1,GETDATE()-7,1,0,0); 
INSERT INTO CONSUMO(IDCONSUMO,IDEMPLEADO,IDRESERVA,IDSERVICIO,FECHA,CANTIDAD,PRECIO,COSTO)
VALUES (6, 1, 1, 4,GETDATE()-6,1,0,0);
INSERT INTO CONSUMO(IDCONSUMO,IDEMPLEADO,IDRESERVA,IDSERVICIO,FECHA,CANTIDAD,PRECIO,COSTO)
VALUES (7, 3, 1, 2,GETDATE()-5,1,0,0);
GO

SET IDENTITY_INSERT dbo.CONSUMO OFF;  
GO

UPDATE CONSUMO 
SET PRECIO = S.PRECIO, COSTO = C.CANTIDAD * S.PRECIO
FROM CONSUMO C
JOIN SERVICIO S ON C.IDSERVICIO = S.IDSERVICIO
GO

SELECT * FROM CONSUMO;
SELECT * FROM RESERVA;
GO

-- Pago de Reserva 1

DECLARE @COSTO_RESERVA DECIMAL(10,2), @COSTO_CONSUMO DECIMAL(10,2),
		@TOTAL DECIMAL(10,2), @IMPUESTO DECIMAL(10,2), @IMPORTE DECIMAL(10,2);
SELECT @COSTO_RESERVA = COSTO FROM RESERVA WHERE IDRESERVA=1;
SELECT @COSTO_CONSUMO = SUM(COSTO) FROM CONSUMO WHERE IDRESERVA=1;
SET @TOTAL = @COSTO_RESERVA + @COSTO_CONSUMO;
SET @IMPORTE = @TOTAL / 1.18;
SET @IMPUESTO = @TOTAL - @IMPORTE;
INSERT INTO PAGO(IDRESERVA,IDEMPLEADO,FECHA,IMPORTE,IMPUESTO,TOTAL)
VALUES(1,1,GETDATE()-5,@IMPORTE,@IMPUESTO,@TOTAL);
GO


SELECT * FROM CONSUMO WHERE IDRESERVA=1;
SELECT * FROM RESERVA WHERE IDRESERVA=1;
SELECT * FROM PAGO WHERE IDRESERVA=1;
GO


